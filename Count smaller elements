class Solution {
    int[] constructLowerArray(int[] arr) {
        // code here
     int[] s = new int[arr.length];
        int m = 0;
        for (int i = 0; i < arr.length; i++) {
            int count = 0;
            for (int j = i + 1; j < arr.length; j++) {
                if (arr[i] > arr[j]) {
                    count++;
                }
            }
            s[m++] = count;
        }

        return s;
    }
}
O(n2)
/////
class Solution {
     int[] constructLowerArray(int[] arr) {
        int n = arr.length;
        int[][] v = new int[n][2];
        for (int i = 0; i < n; i++) {
            v[i][0] = arr[i];
            v[i][1] = i;
        }
        int[] ans = new int[n];
        mergesort(v, ans, 0, n - 1);

        return ans;
    }

    static void merge(int[][] v, int[] ans, int l, int mid, int h)
    {

        int[][] t = new int[h - l + 1][2]; // temporary array for merging both halves
        int i = l;
        int j = mid + 1;
        int k = 0;

        while (i < mid + 1 && j <= h) {

            // v[i][0] is greater than all
            // the elements from j till h.
            if (v[i][0] > v[j][0]) {
                ans[v[i][1]] += (h - j + 1);
                t[k][0] = v[i][0];
                t[k][1] = v[i][1];
                i++;
            }
            else {
                t[k][0] = v[j][0];
                t[k][1] = v[j][1];
                j++;
            }
            k++;
        }

        // if any elements left in left array
        while (i <= mid) {
            t[k][0] = v[i][0];
            t[k][1] = v[i][1];
            k++;
            i++;
        }
        // if any elements left in right array
        while (j <= h) {
            t[k][0] = v[j][0];
            t[k][1] = v[j][1];
            k++;
            j++;
        }
        // putting elements back in main array in
        // descending order
        k = 0;
        for (i = l; i <= h; i++, k++) {
            v[i][0] = t[k][0];
            v[i][1] = t[k][1];
        }
    }

    static void mergesort(int[][] v, int[] ans, int i, int j)
    {
        if (i < j) {
            int mid = (i + j) / 2;

            // calling mergesort for left half
            mergesort(v, ans, i, mid);

            // calling mergesort for right half
            mergesort(v, ans, mid + 1, j);

            // merging both halves and generating answer
            merge(v, ans, i, mid, j);
        }
    }
}
O(nlog n)
